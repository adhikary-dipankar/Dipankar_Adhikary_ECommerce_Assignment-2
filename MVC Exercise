Exercise:

Update the project for adding Employee to the list and displaying the list with updated Employee, 
and do the other operations with added employee

Update the project for updating any existing Employee (search by ID, update the name). 

The project should have proper links and form for adding and updating.

namespace Day30MVC.Models
{
    public class Employee
    {

        public string name { get; set; }
        public int id { get; set; }

        public Employee(string name, int id)
        {
            this.name = name;
            this.id = id;
        }

        public Employee() { }

        public override string ToString()
        {
            return "\nEmployee: " + name + " with Id: " + id;
        }
    }
}


using System.Collections.Generic;
using System;

namespace Day30MVC.Models
{
    public class EmployeeList
    {
        public List<Employee> emps = new List<Employee>();
        public EmployeeList(List<Employee> emps) { this.emps = emps; }
        public EmployeeList(Employee emp) { this.emps.Add(emp); }
        public EmployeeList()
        {
            this.AddEmp(new Employee("abc", 101));
            this.AddEmp(new Employee("xyz", 102));
            this.AddEmp(new Employee("abcxyz", 103));
            this.AddEmp(new Employee("Dipankar", 104));
            this.AddEmp(new Employee("Loki", 105));
        }
        public void AddEmp(Employee emp) { this.emps.Add(emp); }
        public void DispEmp()
        {
            foreach (Employee e in emps)
            {
                Console.WriteLine(e);
            }
        }
        public Employee getEmp(string name)
        {
            Employee e = new Employee("Default", 100);
            foreach (Employee ee in emps)
            {
                if (ee.name.Equals(name))
                {
                    e = ee;
                }
            }

            //Employee e2 = emps.Find(ee => ee.name.Equals(name));
            return e;
        }

        public void UpdateEmployeeName(int id, string newName)
        {
           
            Employee employeeToUpdate = this.emps.Find(emp => emp.id == id);

            if (employeeToUpdate != null)
            {
                
                employeeToUpdate.name = newName;
                
            }
        }

      
    }
}







II.
Provide a Menu with buttons for : Add a new Student, Update an existing student, delete an existing Student, display the list of students, search a student according to Id, Search the group of students according to criteria as mentioned below.

Prepare an MVC project for Student class and StdList class
Add Views which submits a new Student data to the controller of Student which adds student data to the list of stds and returns the fresh list in JSON format.
Provide link to each page in each view
Student{id, name, course, duration in years, year of enrollment, fees}
Provide search according to ID, course, name, duration, year, fees range.













day 31 MVC



Exercise:

Login Id and password : pair of data (login form)
Being maintained for all the logged in pages.
Page 1: Login Page  : Next button take us to Inbox
Hidden step/action: Saves the cookies: either the data given by client or empty string(none of the cookies are null), redirects to Inbox page
Page 2: Inbox Page: 
If the cookies are present :
Just a table full of scratch messages
A link to Inbox page, Draft page, Sent page, Compose page
A link to logout
Else Inbox page should be empty with link to login page
Page 3-5: Compose Page / Draft page / Sent page:
If the cookies are present :
Just a table full of scratch data
A link to Inbox page, Draft page, Sent page, Compose page
A link to logout 
Else the pages should be empty with link to login page
Page 6 : Logout page:
Refresh the cookie for login credentials and delete the username and password
Provide a link to login page
