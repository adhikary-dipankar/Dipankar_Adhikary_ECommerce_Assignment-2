<?xml version="1.0" encoding="UTF-8"?>
<!--Example-1-->
<!--XML document about a Library-->

<library>
    <book>
        <title>The Great Gatsby</title>
        <author>F. Scott Fitzgerald</author>
        <publishedYear>1925</publishedYear>
        <genre>Fiction</genre>
        <ISBN>978-0-7432-7356-5</ISBN>
    </book>
    <book>
        <title>To Kill a Mockingbird</title>
        <author>Harper Lee</author>
        <publishedYear>1960</publishedYear>
        <genre>Fiction</genre>
        <ISBN>978-0-06-112008-4</ISBN>
    </book>
</library>




<?xml version="1.0" encoding="UTF-8"?>
<!--Example-2-->
<library>

    <book>
        <title>"The Great Gatsby"</title>
        <author>Lee John</author><!-- Not Using an entity reference will give an error -->
        <publishedYear>1925</publishedYear>
        <genre>Fiction</genre>
        <ISBN>978-0-7432-7356-5</ISBN>
    </book>

    <book>
        <title>&quot;The Great Gatsby&quot;</title>
        <author>Lee &amp; John</author> <!-- Using an entity reference -->
        <publishedYear>1925</publishedYear>
        <genre>&apos;Fiction&apos;</genre>
        <ISBN>978-0-7432-7356-5</ISBN>
    </book>


    <!-- This is a valid comment -->
    <!--
    This is an example of multi-line comment.
    It can span multiple lines.
    -->

    <!-- This is an invalid comment with a double-dash inside -->

</library>




<?xml version="1.0" encoding="UTF-8"?>
<!--Example-3-->

<students>
    <!-- Student with attributes -->
    <student id="1" grade="A">
        <name>John Doe</name>
        <age>20</age>
    </student>

    <!-- Student without attributes -->
    <student>
        <name>Jane Smith</name>
        <age>22</age>
        <id>1</id>
        <grade>A</grade>
    </student>
</students>







<?xml version="1.0" encoding="UTF-8"?>
<!--Example-4-->

<library xmlns:lib="http://www.library-ex-4.com/library"
         xmlns:book="http://www.library-ex-4.com/books">

    <lib:libraryInfo>
        <lib:name>Central Library</lib:name>
        <lib:location>New York</lib:location>
    </lib:libraryInfo>

    <book:book>
        <book:title>The Great Gatsby</book:title>
        <book:author>F. Scott Fitzgerald</book:author>
        <book:publishedYear>1925</book:publishedYear>
        <book:genre>Fiction</book:genre>
        <book:ISBN>978-0-7432-7356-5</book:ISBN>
    </book:book>

    <book:book>
        <book:title>To Kill a Mockingbird</book:title>
        <book:author>Harper Lee</book:author>
        <book:publishedYear>1960</book:publishedYear>
        <book:genre>Fiction</book:genre>
        <book:ISBN>978-0-06-112008-4</book:ISBN>
    </book:book>

</library>





<?xml version="1.0" encoding="UTF-8"?>
<!--Example-5-->

<?xml-stylesheet type="text/xsl" href="Ex_5_style.xsl"?>
<library>
    <book>
        <title>The Great Gatsby</title>
        <author>F. Scott Fitzgerald</author>
        <publishedYear>1925</publishedYear>
        <genre>Fiction</genre>
        <ISBN>978-0-7432-7356-5</ISBN>
    </book>
    <book>
        <title>To Kill a Mockingbird</title>
        <author>Harper Lee</author>
        <publishedYear>1960</publishedYear>
        <genre>Fiction</genre>
        <ISBN>978-0-06-112008-4</ISBN>
    </book>
</library>



<?xml version="1.0" encoding="UTF-8"?>
<!--Example-5 XSLT File-->

<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:template match="/">
        <html>
            <head>
                <title>Library Books</title>
            </head>
            <body>
                <h1>Library Books</h1>
                <table border="1">
                    <tr>
                        <th>Title</th>
                        <th>Author</th>
                        <th>Published Year</th>
                        <th>Genre</th>
                        <th>ISBN</th>
                    </tr>
                    <xsl:for-each select="library/book">
                        <tr>
                            <td><xsl:value-of select="title"/></td>
                            <td><xsl:value-of select="author"/></td>
                            <td><xsl:value-of select="publishedYear"/></td>
                            <td><xsl:value-of select="genre"/></td>
                            <td><xsl:value-of select="ISBN"/></td>
                        </tr>
                    </xsl:for-each>
                </table>
            </body>
        </html>
    </xsl:template>
</xsl:stylesheet>






<?xml version="1.0" encoding="UTF-8"?>
<!--Example-6-->

<library>
    <book id="1">
        <title>The Great Gatsby</title>
        <author>F. Scott Fitzgerald</author>
        <publishedYear>1925</publishedYear>
        <genre>Fiction</genre>
        <ISBN>978-0-7432-7356-5</ISBN>
    </book>
    <book id="2">
        <title>To Kill a Mockingbird</title>
        <author>Harper Lee</author>
        <publishedYear>1960</publishedYear>
        <genre>Fiction</genre>
        <ISBN>978-0-06-112008-4</ISBN>
    </book>
	 
    <!--
	 
        for $book in /library/book 
        return $book/title

        Result:
        The Great Gatsby
        To Kill a Mockingbird

        for $book in /library/book[genre = 'Fiction']
        return $book/author

        Result:
        Harper Lee

        for $book in /library/book[publishedYear < 1960] 
        return $book
		  
    -->


    <!-- save the query as query.xq and then execute in Terminal
	 
        
    for $book in doc("Ex_6.xml")//book
    return $book/title/text()

    Result:

    The Great Gatsby
    To Kill a Mockingbird
	 
    -->

</library>



<?xml version="1.0" encoding="UTF-8"?>
<!--Example-6-->

<!-- save the query as query.xq and then execute in Terminal-->
    
for $book in doc("Ex_6.xml")//book
return $book/title/text()





<!--Example-7-->

using System;
using System.Collections.Generic;
using System.IO;
using System.Xml.Serialization;

namespace SerializationXML
{
    // Define a Student class to represent the data
    [Serializable]
    public class Student
    {
        public string Name { get; set; }
        public int Age { get; set; }
        public string Course { get; set; }
        public decimal Fees { get; set; }
        public int Duration { get; set; }
        public int AdmissionYear { get; set; }

        public Student(string name, int age, string course, decimal fees, int duration, int admissionYear)
        {
            this.Name = name;
            this.Age = age;
            this.Course = course;
            this.Fees = fees;
            this.Duration = duration;
            this.AdmissionYear = admissionYear;
        }

        public Student() { }
    }

    internal class Program
    {
        static void Main(string[] args)
        {
            // Create a new list of students with additional data
            List<Student> students = new List<Student>
            {
                new Student("Virat Kohli", 30, "Computer Science", 5000.0M, 4, 2019),
                new Student("Steve Smith", 25, "Mathematics", 4500.0M, 3, 2020),
                new Student("Ms Dhoni", 30, "Chemistry", 5000.0M, 4, 2021),
                new Student("Rohit Sharma", 25, "Physics", 4500.0M, 3, 2018),
                new Student("Joe Root", 30, "Quantum Computing", 5000.0M, 4, 2017),
                new Student("Ben Stokes", 25, "Cloud Computing", 4500.0M, 3, 2022),

            };

            // Serialize the student list to XML
            XmlSerializer s = new XmlSerializer(typeof(List<Student>));
            using (TextWriter writer = new StreamWriter("students.xml"))
            {
                s.Serialize(writer, students);
            }

            Console.WriteLine("Student objects serialized to students.xml\n");

            //Console.WriteLine("Student objects deserialized to students.xml\n");

            //// Deserialize the XML data back into a list of Student objects
            //List<Student> deserializedStudents;
            //XmlSerializer ds = new XmlSerializer(typeof(List<Student>));
            //using (TextReader reader = new StreamReader("students.xml"))
            //{
            //    deserializedStudents = (List<Student>)ds.Deserialize(reader);
            //}

            //// Print the deserialized student data
            //foreach (var student in deserializedStudents)
            //{
            //    Console.WriteLine($"Student Name: {student.Name}, \nAge: {student.Age}, \nCourse: {student.Course}, \nFees: {student.Fees}, \nDuration: {student.Duration}, \nAdmissionYear: {student.AdmissionYear}\n");
            //}
        }
    }
}














